#<?cfg paf policy ?>

needCalibRegistry: true

camera:        "../hsc/camera"
defects:    "../hsc/defects"

skytiles: {
    resolutionPix: 700    # Resolution for skytiles: 700 --> 500 arcsec sides
    paddingArcsec: 10.0   # Overlap between skytiles
}

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccd"
    tract: "patch"
    visit: "ccd"
    sensor: "none"
}
defaultLevel: "sensor"
defaultSubLevels: {
    # Default sublevel for dataRef.subItems()
    skyTile: "sensor"
    visit: "sensor"
    sensor: "none"
}

exposures: {
    raw: {
        template:    "%(field)s/%(dateObs)s/%(pointing)05d/%(filter)s/HSC-%(visit)07d-%(ccd)03d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)07d-f%(filter)s/c%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    visitim: {
        template:      "visitim/v%(visit)07d-f%(filter)s/c%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    calexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORR-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    revexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORW-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    expMetadata: {
        template: "%(pointing)05d/%(filter)s/qa/metaQaExp-%(visit)07d-000.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    wcs: {
        template: "%(pointing)05d/%(filter)s/corr/%(tract)04d/wcs-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }

    fcr: {
        template: "%(pointing)05d/%(filter)s/corr/%(tract)04d/fcr-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    detj: {
        template:      "%(pointing)05d/%(filter)s/corr/%(tract)04d/DETJ-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    dcor: {
        template:      "%(pointing)05d/%(filter)s/corr/%(tract)04d/DCOR-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    calibrated_src: {
        template:      "%(pointing)05d/%(filter)s/output/%(tract)04d/CALSRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    calibrated_exp:  {
        template:      "%(pointing)05d/%(filter)s/corr/%(tract)04d/CALEXP-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }

    deepCoadd: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw_skytile
    }
    deepCoadd_calexp: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        level:         "None"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_calexp_det: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp_det-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        level:         "None"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_depth: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw_skytile
    }
    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/warp-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw_skytile
    }
    deepCoadd_bgRef: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/bgRef-%(tract)d-%(patch)s-%(filter)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw_skytile
    }
    deepCoadd_bg: {
        template:      "deepCoadd/%(filter)s/%(tract)d/%(patch)s/bgModel-%(tract)d-%(patch)s-%(filter)s.fits"
        python:        "lsst.afw.image.ImageF"
        persistable:   "ImageF"
        storage:       "FitsStorage"
        level:         "Skytile"
        tables:        raw_skytile
    }

    deepCoadd_diff: {
        template:    "deepCoadd-diff/%(filter)s/%(tract)d/diff-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw_skytile
    }
    deepCoadd_tempExp_diff: {
        template:    "deepCoadd-diff/%(filter)s/%(tract)d/%(patch)s/diff-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw_skytile
    }

    diff: {
        template:      "diff/%(diff)05d/DIFF%(patch)08d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    mosaicCalib: {
        template:    "%(pointing)05d/%(filter)s/output/CALIB-%(visit)07d-%(ccd)03d-%(tract)d.fits"
        python:      "lsst.afw.image.ExposureU"
        persistable: "ExposureU"
        storage:     "FitsStorage"
        columns:     pointing
        columns:     filter
        columns:     visit
        columns:     ccd
        tables:      raw
        level:       Ccd
    }

    coaddTempExp: {
        template:    "coaddTemp/%(filter)s/%(tract)d/TEMP-%(visit)07d-%(ccd)03d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw
    }

    ossImage: {
        template:    "%(pointing)05d/%(filter)s/thumbs/oss-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        tables:      "raw_visit"
    }
    flattenedImage: {
        template:    "%(pointing)05d/%(filter)s/thumbs/flattened-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        tables:      "raw_visit"
    }

}

calibrations: {
    bias: {
        template:    "BIAS/%(calibDate)s/NONE/%(calibVersion)s/BIAS-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "bias"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    dark: {
        template:    "DARK/%(calibDate)s/NONE/%(calibVersion)s/DARK-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "dark"
        columns:     "ccd"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    flat: {
        template:    "FLAT/%(calibDate)s/%(filter)s/%(calibVersion)s/FLAT-%(ccd)03d.fits"
        python:      "lsst.afw.image.MaskedImageF"
        persistable: "MaskedImageF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "flat"
        columns:     "ccd"
        columns:     "filter"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    fringe: {
        template:    "FRINGE/%(calibDate)s/%(filter)s/%(calibVersion)s/FRINGE-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "fringe"
        columns:     "ccd"
        columns:     "filter"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    bfKernel: {
        template:    "BFKERNEL/brighter_fatter_kernel.pkl"
        python:      "numpy.ndarray"
        persistable: "ignored"
        storage:     "PickleStorage"
        level:       "None"
    }
}

datasets: {
    calexpBackground: {
        template:      "%(pointing)05d/%(filter)s/corr/BKGD-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_visit
    }
    psf: {
        template:      "%(pointing)05d/%(filter)s/output/PSF-%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    apCorr: {
        template:      "%(pointing)05d/%(filter)s/output/APC-%(visit)07d-%(ccd)03d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_visit
    }
    src: {
        template:      "%(pointing)05d/%(filter)s/output/SRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    src_schema: {
        template:      "schema/src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    transformed_src: {
        template:      "%(pointing)05d/%(filter)s/output/TRSRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    transformed_src_schema: {
        template:      "schema/transformed_src.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatch: {
        template:      "%(pointing)05d/%(filter)s/output/MATCH-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatchFull: {
        template:      "%(pointing)05d/%(filter)s/output/ML-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    srcMatch: {
        template:      "%(pointing)05d/%(filter)s/output/SRCMATCH-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    srcMatchFull: {
        template:      "%(pointing)05d/%(filter)s/output/SRCML-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icSrc: {
        template:      "%(pointing)05d/%(filter)s/output/ICSRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icSrc_schema: {
        template:      "schema/icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }


    log: {
        template:      "%(pointing)05d/%(filter)s/logs/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(pointing)05d/%(filter)s/logs"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }

    deepCoadd_diffsrc: {
        template:    "deepCoadd-diff/%(filter)s/%(tract)d/diffsrc-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.table.SourceCatalog"
        persistable: "SourceCatalog"
        storage:     "FitsCatalogStorage"
	tables:      "raw_skytile"
    }
    deepCoadd_tempExp_diffsrc: {
        template:    "deepCoadd-diff/%(filter)s/%(tract)d/%(patch)s/diffsrc-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
        python:      "lsst.afw.table.SourceCatalog"
        persistable: "SourceCatalog"
        storage:     "FitsCatalogStorage"
	tables:      "raw_skytile"
    }

    diffsources: {
        template:      "diff/%(diff)05d/SRC%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw_skytile"
    }
    diffsources_schema: {
        template:      "schema/diffsources.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw_skytile"
    }

    diffpsf: {
        template:      "diff/%(diff)05d/PSF%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    warppsf: {
        template:      "%(pointing)05d/%(filter)s/warp/WARPPSF-%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }
 
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepMergedCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepMergedCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    stackExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    stackExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    eups_versions: {
        template:      "config/eups.versions"
        python:        "lsst.daf.persistence.EupsVersions"
        persistable:   "ignored"
        storage:       "EupsStorage"
    }

    processCcd_config: {
        template:      "config/processCcd.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processCcd_metadata: {
        template:      "%(pointing)05d/%(filter)s/processCcd_metadata/%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    transformSrcMeasurement_config: {
        template:      "config/transformSrcMeasurement.py"
        python:        "lsst.pipe.tasks.transformMeasurement.RunTransformConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    transformSrcMeasurement_metadata: {
        template:      "%(pointing)05d/%(filter)s/transformSrcMeasurement_metadata/%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    processExposure_config: {
        template:      "config/processExposure.py"
        python:        "hsc.pipe.tasks.processExposure.ProcessExposureConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processExposure_metadata: {
        template:      "%(pointing)05d/%(filter)s/processExposure_metadata/%(visit)07d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    Mosaic_config: {
        template:      "config/mosaic.py"
        python:        "lsst.meas.mosaic.mosaicTask.MosaicConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }

    processStack_config: {
        template:      "config/processStack.py"
        python:        "hsc.pipe.tasks.processStack.ProcessStackConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processStack_metadata: {
        template:      "stack/%(stack)05d/processStack_metadata/%(patch)08d%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    deepCoadd_initPsf: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    deepCoadd_skyMap: {
        template:    "deepCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    deep_makeSkyMap_metadata: {
        template:      "metadata/deep_makeSkyMap.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    deep_makeDiscreteSkyMap_metadata: {
        template:      "metadata/deep_makeDiscreteSkyMap.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    deep_makeCoaddTempExp_config: {
        template:      "config/deep_makeCoaddTempExp.py"
        python:        "lsst.pipe.tasks.makeCoaddTempExp.MakeCoaddTempExpConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_makeCoaddTempExp_metadata: {
        template:      "deep_makeCoaddTempExp_metadata/%(filter)s/%(tract)d/%(patch)s_metadata.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_assembleCoadd_config: {
        template:      "config/deep_assembleCoadd.py"
        python:        "lsst.pipe.tasks.assembleCoadd.AssembleCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_assembleCoadd_metadata: {
        template:      "deep_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_safeClipAssembleCoadd_config: {
        template:      "config/deep_safeClipAssembleCoadd.py"
        python:        "lsst.pipe.tasks.assembleCoadd.SafeClipAssembleCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_safeClipAssembleCoadd_metadata: {
        template:      "deep_assembleCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deep_coadd_config: {
        template:      "config/deep_coadd.py"
        python:        "lsst.pipe.tasks.coadd.CoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_coadd_metadata: {
        template:      "deep_coadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_icSrc: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/icSrc-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_icSrc_schema: {
        template:      "schema/deepCoadd_icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deepCoadd_psf: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/psf-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_apCorr: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/apCorr-%(filter)s-%(tract)d-%(patch)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/src-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_src_schema: {
        template:      "schema/deepCoadd_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    deepCoadd_srcMatchFull: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatchFull-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    deepCoadd_icMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/icMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    deepCoadd_calexpBackground: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/bkgd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deepCoadd_calexp_detBackground: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/det_bkgd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deep_processCoadd_config: {
        template:      "config/deep_processCoadd.py"
        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_metadata: {
        template:      "deep_processCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    bias_config: {
        template:      "config/bias.py"
        python:        "hsc.pipe.tasks.detrends.BiasConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    dark_config: {
        template:      "config/dark.py"
        python:        "hsc.pipe.tasks.detrends.DarkConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    flat_config: {
        template:      "config/flat.py"
        python:        "hsc.pipe.tasks.detrends.FlatConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    fringe_config: {
        template:      "config/fringe.py"
        python:        "hsc.pipe.tasks.detrends.FringeConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }

    solvetansip_config: {
        template:      "config/solvetansip.py"
        python:        "lsst.pex.config.Config"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    stacker_config: {
        template:      "config/stacker.py"
        python:        "hsc.pipe.tasks.stack.StackConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    forcedCoadd_config: {
        template:      "config/forcedCoadd.py"
        python:        "hsc.pipe.tasks.forcedCoadd.ForcedCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    forcedCcd_config: {
        template:      "config/forcedCcd.py"
        python:        "hsc.pipe.tasks.forcedCcd.ForcedCcdConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }

    deepCoadd_forced_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/forced_src-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_forced_src_schema: {
        template:      "schema/deepCoadd_forced_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
    }
    deepCoadd_forced_config: {
        template:      "config/forcedPhotCoadd.py"
        python:        "lsst.meas.base.forcedPhotCoadd.ForcedPhotCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
    }
    deepCoadd_forced_metadata: {
        template:      "deepCoadd_forcedPhotCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    forced_src: {
        template:      "%(pointing)05d/%(filter)s/tract%(tract)d/FORCEDSRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_visit
    }
    forced_src_schema: {
        template:      "schema/forced_src_schema.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
    }
    forcedPhotCcd_config: {
        template:      "config/forcedPhotCcd.py"
        python:        "lsst.meas.base.forcedPhotCcd.ForcedPhotCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
    }
    forcedPhotCcd_metadata: {
        template:      "%(pointing)05d/%(filter)s/tract%(tract)d/forcedPhotCcd_metadata/%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    ossThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/oss-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    flattenedThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/flattened-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    calexpThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/corr-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }

    plotMagHist: {
        template:    "%(pointing)05d/%(filter)s/qa/magHist-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingRough: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingRough-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingRobust: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingRobust-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingMap: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingMap-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipseMap: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipseMap-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipticityMap: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityMap-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotFwhmGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/fwhmGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipseGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipseGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipticityGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotPsfSrcGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfSrcGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotPsfModelGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfModelGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    fitsFwhmGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/fwhmGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsEllipticityGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsEllPaGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellPaGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsPsfSrcGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfSrcGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsPsfModelGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfModelGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    tableSeeingMap: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingMap-%(visit)07d-%(ccd)03d.txt"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    tableSeeingGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingGrid-%(visit)07d-%(ccd)03d.txt"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }

    focusPlot: {
        template:    "%(pointing)05d/%(filter)s/qa/focus-%(visit)07d.png"
        # Not really text: we only need the filename, and will write the output ourselves
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    processFocus_config: {
        template:      "config/processFocus.py"
        python:        "hsc.pipe.tasks.focusTask.ProcessFocusConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processFocus_metadata: {
        template:      "%(pointing)05d/%(filter)s/processFocus_metadata/%(visit)07d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    focusSweepPlot: {
        template:    "%(pointing)05d/%(filter)s/qa/focusSweep-%(visit)07d.png"
        # Not really text: we only need the filename, and will write the output ourselves
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    processFocusSweep_config: {
        template:      "config/processFocusSweep.py"
        python:        "hsc.pipe.tasks.focusTask.ProcessFocusSweepConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }

    # Detections on coadds
    deepCoadd_det: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/det-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    detectCoaddSources_config: {
        template:      "config/detect.py"
        python:        "lsst.pipe.tasks.multiBand.DetectCoaddSourcesConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    detectCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/detectMD-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_det_schema: {
        template:      "schema/deepCoadd_det.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }

    # Merged detections on coadds
    deepCoadd_mergeDet: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDet-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    mergeCoaddDetections_config: {
        template:      "config/mergeDetect.py"
        python:        "lsst.pipe.tasks.multiBand.MergeDetectionsConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    mergeCoaddDetections_metadata: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDetMD-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_mergeDet_schema: {
        template:      "schema/deepCoadd_mergeDet.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }
    deepCoadd_peak_schema: {
        template:      "schema/deepCoadd_peak.fits"
        python:        "lsst.afw.detection.PeakCatalog"
        persistable:   "PeakCatalog"
        storage:       "FitsCatalogStorage"
    }

    # Measurements on coadds
    deepCoadd_meas: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/meas-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_multibandReprocessing: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/REPROCESSING-%(tract)d-%(patch)s"
        python:        "__builtin__.str"
        persistable:   None
        storage:       "TextStorage"
    }
    measureCoaddSources_config: {
        template:      "config/measureMerged.py"
        python:        "lsst.pipe.tasks.multiBand.MeasureMergedCoaddSourcesConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    measureCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/measMD-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_meas_schema: {
        template:      "schema/deepCoadd_meas.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }

    # Reference catalog for coadds
    deepCoadd_ref: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/ref-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    mergeCoaddMeasurements_config: {
        template:      "config/mergeMeasure.py"
        python:        "lsst.pipe.tasks.multiBand.MergeMeasurementsConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    mergeCoaddMeasurements_metadata: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeMeasMD-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_ref_schema: {
        template:      "schema/deepCoadd_ref.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }

    multiband_config: {
        template:      "config/multiband.py"
        python:        "lsst.pipe.tasks.multiBand.MultiBandConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }

    # Plots for analysis QA
    plotCoadd: {
        template:      "plots/%(filter)s/tract-%(tract)d/plot-t%(tract)d-%(filter)s-%(description)s-%(style)s.png"
        python:        __builtin__.str
        persistable:   None
        storage:       TextStorage
    }
    plotSky: {
        template:      "plots/%(filter)s/sky/plot-%(filter)s-%(description)s-%(style)s.png"
        python:        __builtin__.str
        persistable:   None
        storage:       TextStorage
    }
    plotColor: {
        template:      "plots/color/tract-%(tract)d/plot-t%(tract)d-%(description)s-%(style)s.png"
        python:        __builtin__.str
        persistable:   None
        storage:       TextStorage
    }
    plotVisit: {
        template:      "plots/%(filter)s/visit-%(visit)d/plot-v%(visit)d-%(description)s-%(style)s.png"
        python:        __builtin__.str
        persistable:   None
        storage:       TextStorage
    }

}
